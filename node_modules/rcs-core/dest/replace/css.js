'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcss = require('postcss');

var _keyframesLibrary = require('../keyframesLibrary');

var _keyframesLibrary2 = _interopRequireDefault(_keyframesLibrary);

var _selectorLibrary = require('../selectorLibrary');

var _selectorLibrary2 = _interopRequireDefault(_selectorLibrary);

var _regex = require('./regex');

var _regex2 = _interopRequireDefault(_regex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// calls the selectorLibrary.getAttributeSelector internally
// String.replace will call this function and
// get call selectorLibrary.getAttributeSelector directly
var getAttributeSelector = function getAttributeSelector(match) {
  var re = new RegExp(_regex2.default.attributeSelectors);
  var exec = re.exec(match);
  var stringChar = exec[3].charAt(0);
  var stringWithoutStringChars = exec[3].slice(1, exec[3].length - 1);

  var result = match;
  var newString = exec[3];

  var suffix = _selectorLibrary2.default.suffix;
  var prefix = _selectorLibrary2.default.prefix;

  if (exec[2] === '$') {
    newString = stringChar + stringWithoutStringChars + suffix + stringChar;
  }

  if (exec[2] === '^') {
    newString = stringChar + prefix + stringWithoutStringChars + stringChar;
  }

  result = result.replace(_regex2.default.strings, newString);

  return result;
}; // /getCssSelector

var replaceCss = function replaceCss(css) {
  var cssAST = (0, _postcss.parse)(css);
  var regex = _selectorLibrary2.default.getAll({
    regexCss: true,
    addSelectorType: true
  });

  /* ***************** *
   * replace selectors *
   * ***************** */
  cssAST.walk(function (node) {
    if (node.selector) {
      // eslint-disable-next-line no-param-reassign
      node.selectors = node.selectors.map(function (selector) {
        return selector.replace(regex, function (match) {
          return _selectorLibrary2.default.get(match, {
            addSelectorType: true
          });
        });
      });
    }
  });

  /* ***************** *
   * replace keyframes *
   * ***************** */
  cssAST.walkAtRules(function (node) {
    if (!node.name.match(/keyframes/)) {
      return;
    }

    // eslint-disable-next-line no-param-reassign
    node.params = _keyframesLibrary2.default.get(node.params);
  });

  /* ****************** *
   * replace animations *
   * ****************** */
  cssAST.walkDecls(function (node) {
    if (!node.prop.match(/(animation|animation-name)/)) {
      return;
    }

    // eslint-disable-next-line no-param-reassign
    node.value = node.value.replace(',', ' , ').split(' ').map(function (value) {
      return _keyframesLibrary2.default.get(value);
    }).join(' ').replace(' , ', ',');
  });

  /* *************************** *
   * replace attribute selectors *
   * *************************** */
  cssAST.walkRules(function (node) {
    // eslint-disable-next-line no-param-reassign
    node.selector = node.selector.replace(_regex2.default.attributeSelectors, function (match) {
      return getAttributeSelector(match);
    });
  });

  return cssAST.toResult().css;
};

exports.default = replaceCss;
module.exports = exports['default'];