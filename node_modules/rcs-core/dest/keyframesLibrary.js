'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _replace = require('./replace');

var _replace2 = _interopRequireDefault(_replace);

var _keyframesLibrary = require('./keyframesLibrary');

var _keyframesLibrary2 = _interopRequireDefault(_keyframesLibrary);

var _nameGenerator = require('./nameGenerator');

var _nameGenerator2 = _interopRequireDefault(_nameGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KeyframesLibrary = function () {
  function KeyframesLibrary() {
    _classCallCheck(this, KeyframesLibrary);

    this.excludes = [];
    this.keyframes = {};
    this.compressedKeyframes = {};
  }

  _createClass(KeyframesLibrary, [{
    key: 'reset',
    value: function reset() {
      this.excludes = [];
      this.keyframes = {};
      this.compressedKeyframes = {};
    }

    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'fillLibrary',
    value: function fillLibrary(data) {
      var code = data.toString();
      // set the keyframes here
      var keyframes = code.match(_replace2.default.regex.keyframes);

      if (Object.prototype.toString.call(keyframes) === '[object Array]') {
        _keyframesLibrary2.default.set(keyframes.map(function (key) {
          return key.split(/\s+/)[1];
        }));
      }
    } // /fillLibrary

  }, {
    key: 'get',
    value: function get(selector) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var optionsDefault = {
        origKeyframe: true
      };

      var options = (0, _lodash.merge)({}, optionsDefault, opts);

      var result = this.keyframes[selector] || selector;

      // fail on setted exludes
      if ((0, _arrayIncludes2.default)(this.excludes, selector)) {
        return selector;
      }

      // change the objects if origKeyframe are set to false
      // to get information about the compressed keyframes
      if (!options.origKeyframe) {
        result = this.compressedKeyframes[selector] || result;
      }

      return result;
    } // /get

  }, {
    key: 'set',
    value: function set(keyframe, renamedKeyframe) {
      var _this = this;

      if (!keyframe) {
        return;
      }

      // call recursive if it is an array
      if (Object.prototype.toString.call(keyframe) === '[object Array]') {
        keyframe.forEach(function (item) {
          return _this.set(item, renamedKeyframe);
        });

        return;
      }

      // skip excludes
      if ((0, _arrayIncludes2.default)(this.excludes, keyframe)) {
        return;
      }

      // checks if this keyframe was already set
      if (this.keyframes[keyframe]) {
        return;
      }

      var randomName = renamedKeyframe || _nameGenerator2.default.generate();

      // save css selector into this.selectors and this.compressedSelectors
      this.keyframes[keyframe] = randomName;
      this.compressedKeyframes[randomName] = keyframe;
    } // /set

  }, {
    key: 'setExclude',
    value: function setExclude(toExclude) {
      var _this2 = this;

      if (!toExclude) return;

      // call recursive if it is an array
      if (Object.prototype.toString.call(toExclude) === '[object Array]') {
        toExclude.forEach(function (item) {
          return _this2.setExclude(item);
        });

        return;
      }

      if ((0, _arrayIncludes2.default)(this.excludes, toExclude)) {
        return;
      }

      this.excludes.push(toExclude);
    } // /setExclude

  }]);

  return KeyframesLibrary;
}();

exports.default = new KeyframesLibrary();
module.exports = exports['default'];