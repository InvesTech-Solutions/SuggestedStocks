'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _postcss = require('postcss');

var _lodash = require('lodash');

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _object = require('object.entries');

var _object2 = _interopRequireDefault(_object);

var _replace = require('./replace');

var _replace2 = _interopRequireDefault(_replace);

var _nameGenerator = require('./nameGenerator');

var _nameGenerator2 = _interopRequireDefault(_nameGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SelectorLibrary = function () {
  function SelectorLibrary() {
    _classCallCheck(this, SelectorLibrary);

    this.excludes = [];
    this.selectors = {};
    this.attributeSelectors = {};
    this.compressedSelectors = {};
    this.prefix = '';
    this.suffix = '';
  }

  _createClass(SelectorLibrary, [{
    key: 'reset',
    value: function reset() {
      this.excludes = [];
      this.selectors = {};
      this.attributeSelectors = {};
      this.compressedSelectors = {};
      this.prefix = '';
      this.suffix = '';
    } // /reset

  }, {
    key: 'fillLibrary',
    value: function fillLibrary(data) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var regex = _replace2.default.regex;

      var code = data.toString();
      var result = (0, _postcss.parse)(code);

      result.walk(function (root) {
        if (root.selector) {
          _this.set(root.selector.match(regex.selectors), options);
        }
      });
    } // /fillLibrary

  }, {
    key: 'get',
    value: function get(selector) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var optionsDefault = {
        isOrigValue: true,
        addSelectorType: false,
        extend: false
      };

      var options = (0, _lodash.merge)({}, optionsDefault, opts);
      // replaces the first character from a css selector `#test` and `.test` into `test`
      var matchedSelector = selector.replace(/(\.|#)/, '');

      var result = this.selectors[matchedSelector];

      // fail on setted exludes
      if ((0, _arrayIncludes2.default)(this.excludes, matchedSelector)) {
        return selector;
      }

      // change the objects if isOrigValue are set to false
      // to get information about the compressed selectors
      if (!options.isOrigValue) {
        result = this.compressedSelectors[matchedSelector];
      }

      if (!result) {
        return selector;
      }

      if (options.extend) {
        return result;
      }

      if (options.addSelectorType) {
        return result.typeChar + this.prefix + result.compressedSelector + this.suffix;
      }

      return this.prefix + result.compressedSelector + this.suffix;
    } // /get

  }, {
    key: 'getAll',
    value: function getAll() {
      var _this2 = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var originalSelector = void 0;
      var compressedSelector = void 0;

      var resultArray = [];
      var result = {};

      var selectors = this.selectors;
      var optionsDefault = {
        getRenamedValues: false,
        regex: false,
        regexCss: false,
        addSelectorType: false,
        extend: false
      };

      var options = (0, _lodash.merge)({}, optionsDefault, opts);

      if (options.extend) {
        if (options.getRenamedValues) {
          result = this.compressedSelectors;
        } else {
          result = this.selectors;
        }

        if (options.addSelectorType) {
          var modifiedResult = {};

          Object.keys(result).forEach(function (value) {
            var char = result[value].typeChar;

            modifiedResult[char + value] = result[value];
          });

          result = modifiedResult;
        }

        return result;
      } // options.extend

      Object.keys(selectors).forEach(function (selector) {
        compressedSelector = selectors[selector].compressedSelector;
        originalSelector = selector;

        if (options.getRenamedValues) {
          // save compressedSelectors
          result[compressedSelector] = originalSelector;
          resultArray.push(compressedSelector);
        } else {
          // save originalSelectors
          result[selector] = compressedSelector;
          resultArray.push(originalSelector);
        }
      });

      // sort array by it's length to avoid e.g. BEM syntax
      if (options.regex || options.regexCss) {
        resultArray = resultArray.sort(function (a, b) {
          return b.length - a.length;
        });
      }

      // if regexCss is true
      // selectors also MUST be true
      if (options.regexCss) {
        options.addSelectorType = true;
      }

      if (options.addSelectorType) {
        resultArray = resultArray.map(function (value) {
          var selectorMap = _this2.get(value, {
            isOrigValue: !options.getRenamedValues,
            addSelectorType: options.addSelectorType,
            extend: true
          });

          return selectorMap.typeChar + value;
        });
      }

      if (options.regex || options.regexCss) {
        var regex = options.regexCss ? new RegExp(resultArray.join('|'), 'g')
        // the next MUST be options.regex === true
        : new RegExp('(\\s|\\.|#)(' + resultArray.join('|') + ')[\\s)]', 'g');

        var regexResult = resultArray.length === 0 ? undefined : regex;

        return regexResult;
      }

      if (options.addSelectorType) {
        var tempResult = {};

        resultArray.forEach(function (value) {
          var modValue = value.slice(1, value.length);

          tempResult[value] = result[modValue];
        });

        result = tempResult;
      }

      return result;
    } // /getAll

  }, {
    key: 'set',
    value: function set(value, renamedSelector) {
      var _this3 = this;

      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var options = opts;
      var thisRenamedSelector = renamedSelector;
      var modifiedOptions = {};

      if (!value) {
        return;
      }

      if ((typeof thisRenamedSelector === 'undefined' ? 'undefined' : _typeof(thisRenamedSelector)) === 'object') {
        options = thisRenamedSelector;
        thisRenamedSelector = undefined;
      }

      // loops through String.match array
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        value.forEach(function (v) {
          _this3.set(v, options);
        });

        return;
      }

      // checks if this value was already set
      if (this.get(value) !== value) {
        return;
      }

      var selectorLibrarySelector = value.slice(1, value.length);

      if (!options.ignoreAttributeSelectors) {
        if (this.isInAttributeSelector(value)) {
          modifiedOptions.preventRandomName = true;
        }
      }

      // skip excludes
      if ((0, _arrayIncludes2.default)(this.excludes, selectorLibrarySelector)) {
        return;
      }

      modifiedOptions = (0, _lodash.merge)({}, options, modifiedOptions);

      // save css selector into this.selectors and this.compressedSelectors
      this.selectors[selectorLibrarySelector] = this.generateMeta(value, thisRenamedSelector, modifiedOptions);

      var compressedSelector = this.selectors[selectorLibrarySelector].compressedSelector;

      this.compressedSelectors[compressedSelector] = this.selectors[selectorLibrarySelector];
    } // /set

  }, {
    key: 'setMultiple',
    value: function setMultiple(selectors) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (Object.prototype.toString.call(selectors) !== '[object Object]') {
        return;
      }

      (0, _object2.default)(selectors).forEach(function (entry) {
        return _this4.set(entry[0], entry[1], options);
      });
    } // /setMultiple

  }, {
    key: 'setPrefix',
    value: function setPrefix(prefix) {
      if (typeof prefix !== 'string') {
        return;
      }

      this.prefix = prefix;
    } // /setPrefix

  }, {
    key: 'setSuffix',
    value: function setSuffix(suffix) {
      if (typeof suffix !== 'string') {
        return;
      }

      this.suffix = suffix;
    } // /setSuffix

  }, {
    key: 'setExclude',
    value: function setExclude(toExclude) {
      var _this5 = this;

      if (!toExclude) return;

      if (typeof toExclude === 'string') {
        if ((0, _arrayIncludes2.default)(this.excludes, toExclude)) {
          return;
        }

        this.excludes.push(toExclude);

        return;
      }

      toExclude.forEach(function (e) {
        if ((0, _arrayIncludes2.default)(_this5.excludes, e)) {
          return;
        }

        _this5.excludes.push(e);
      });
    } // /setExclude

  }, {
    key: 'generateMeta',
    value: function generateMeta(string, renamedSelector) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var compressedSelector = void 0;
      var options = opts;
      var thisRenamedSelector = renamedSelector;

      var selectorLibrarySelector = string.slice(1, string.length);

      if ((typeof renamedSelector === 'undefined' ? 'undefined' : _typeof(renamedSelector)) === 'object') {
        options = renamedSelector;
        thisRenamedSelector = undefined;
      } else if (thisRenamedSelector !== undefined && (thisRenamedSelector.charAt(0) === '.' || thisRenamedSelector.charAt(0) === '#')) {
        thisRenamedSelector = thisRenamedSelector.slice(1, thisRenamedSelector.length);
      }

      // return the own value if it exists
      if (this.selectors[selectorLibrarySelector] !== undefined) {
        return this.selectors[selectorLibrarySelector];
      }

      var type = string.charAt(0) === '.' ? 'class' : 'id';
      var typeChar = string.charAt(0);
      var selector = string;

      if (options.preventRandomName === true) {
        compressedSelector = selectorLibrarySelector;
      } else {
        compressedSelector = thisRenamedSelector || _nameGenerator2.default.generate();
      }

      // does not allow the same renamed selector
      while (this.compressedSelectors[compressedSelector]) {
        compressedSelector = _nameGenerator2.default.generate();
      }

      return {
        type: type,
        typeChar: typeChar,
        selector: selector,
        modifiedSelector: selectorLibrarySelector,
        compressedSelector: compressedSelector
      };
    } // /generateMeta

  }, {
    key: 'setAttributeSelector',
    value: function setAttributeSelector(attributeSelector) {
      var _this6 = this;

      if (!attributeSelector) {
        return;
      }

      if ((typeof attributeSelector === 'undefined' ? 'undefined' : _typeof(attributeSelector)) === 'object') {
        attributeSelector.forEach(function (value) {
          return _this6.setAttributeSelector(value);
        });

        return;
      }

      var re = new RegExp(_replace2.default.regex.attributeSelectors);
      var exec = re.exec(attributeSelector);
      var typeChar = exec[1] === 'class' ? '.' : '#';
      var term = exec[3];

      var selector = term;

      if (term.charAt(0).match(/"|'/)) {
        selector = term.slice(1, exec[3].length - 1);
      }

      var attributeSelectorKey = typeChar + exec[2] + selector;

      this.attributeSelectors[attributeSelectorKey] = {
        type: exec[1],
        typeChar: typeChar,
        originalString: attributeSelector,
        regexType: exec[2]
      };
    } // /setAttributeSelector

  }, {
    key: 'isInAttributeSelector',
    value: function isInAttributeSelector(selector) {
      var result = false;

      var slicedSelector = selector.replace(/^[.#]/, '');

      Object.keys(this.attributeSelectors).forEach(function (attributeSelector) {
        var attributeString = attributeSelector.slice(2, attributeSelector.length);

        if (attributeSelector.charAt(0) !== selector.charAt(0)) {
          return;
        }

        if (attributeSelector.charAt(1) === '*') {
          if (slicedSelector.match(attributeString)) {
            result = true;
          }
        }

        if (attributeSelector.charAt(1) === '^') {
          if (slicedSelector.match('^' + attributeString)) {
            result = true;
          }
        }

        if (attributeSelector.charAt(1) === '$') {
          if (slicedSelector.match(attributeString + '$')) {
            result = true;
          }
        }
      });

      return result;
    } // /isInAttributeSelector

  }]);

  return SelectorLibrary;
}();

exports.default = new SelectorLibrary();
module.exports = exports['default'];